#__copyright__   = "Copyright 2024, VISA Lab"
#__license__     = "MIT"

# Define global args
ARG FUNCTION_DIR="/home/app/"
ARG RUNTIME_VERSION="3.9"

FROM python:${RUNTIME_VERSION}-slim AS python-slim

RUN apt-get update \
    && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
RUN pip install --no-cache-dir --upgrade pip && pip install awslambdaric

FROM python-slim AS build-image

# Include global args in this stage of the build
ARG FUNCTION_DIR

# Create function directory
WORKDIR ${FUNCTION_DIR}

# Stage 3 - final runtime image
FROM python-slim AS final-image

# Include global arg in this stage of the build
ARG FUNCTION_DIR

# Set working directory to function root directory
WORKDIR ${FUNCTION_DIR}

# Copy in the built dependencies
COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}

# (Optional) Add Lambda Runtime Interface Emulator and use a script in the ENTR>
ADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/lates>
RUN chmod 755 /usr/bin/aws-lambda-rie

# Install torch and torchvision
RUN pip install torch==1.11.0+cpu -f https://download.pytorch.org/whl/torch_sta>
RUN pip install torchvision==0.12.0+cpu -f https://download.pytorch.org/whl/tor>
ENV TORCH_HOME=/tmp/torch

# Copy required files
COPY requirements.txt face_recognition_code.py handler.py entry.sh ${FUNCTION_D>

RUN pip install -r requirements.txt --no-cache-dir
COPY entry.sh /

# Copy function code
COPY handler.py ${FUNCTION_DIR}
RUN chmod 777 /entry.sh

# Set the CMD to your handler (could also be done as a parameter override outsi>
ENTRYPOINT [ "/entry.sh" ]
CMD [ "handler.handler" ]